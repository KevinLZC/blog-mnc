---
export const prerender = false;

import config from '@/config/config.json';
import Base from '@/layouts/Base.astro';
import { markdownify } from '@/lib/utils/textConverter';
import { getEntryBySlug } from 'astro:content';
import { FaAddressCard, FaEnvelope, FaPhoneAlt } from 'react-icons/fa';
import { sendEmail, IEmailData } from '@/lib/utils/sendEmail';

const entry = await getEntryBySlug('pages', 'contact');
const { address, email, phone } = config.contactinfo;
const { title, description, meta_title, image } = entry.data;

const isValidEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

const isRequired = (value: string | null): boolean => {
  return value !== null && value.trim() !== '';
};

const isValidContentLength = (content: string): boolean => {
  return content.length <= 1000;
};

if (Astro.request.method === 'POST') {
  try {
    const data = await Astro.request.formData();
    const { name, email, subject, content } = extractFormData(data);

    const validationResults = validateEmailFields({
      name,
      email,
      subject,
      content,
    });

    if (Object.keys(validationResults).length > 0) {
      console.log('Validation Errors:', validationResults);
      return new Response('Form submitted unsuccessfully', { status: 400 });
    }

    const emailData: IEmailData = {
      name: name || '',
      subject: subject || undefined,
      email: email || '',
      content: content || '',
    };

    await sendEmail(emailData);
    return new Response('Form submitted successfully', { status: 200 });
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
    return new Response('Form submitted unsuccessfully', { status: 400 });
  }
}

function extractFormData(data: FormData) {
  return {
    name: data.get('name') as string | null,
    email: data.get('email') as string | null,
    subject: data.get('subject') as string | null,
    content: data.get('content') as string | null,
  };
}

function validateEmailFields(fields: {
  name: string | null;
  email: string | null;
  subject: string | null;
  content: string | null;
}) {
  const results: { [key: string]: boolean | string } = {};

  if (!isRequired(fields.name)) {
    results.name = 'Name is required.';
  }

  if (!isValidEmail(fields.email || '')) {
    results.email = 'Invalid email format.';
  }

  if (!isRequired(fields.content)) {
    results.content = 'Content is required.';
  } else if (!isValidContentLength(fields.content || '')) {
    results.content = 'Content must not exceed 1000 characters.';
  }

  return results;
}
---

<Base
  title={title}
  meta_title={meta_title}
  description={description}
  image={image}
>
  <section class='section'>
    <div class='container'>
      <h1 set:html={markdownify(title)} class='h2 page-heading' />
      <div class='row md:gx-5 gy-5'>
        <div class='sm:col-5 md:col-4'>
          <p class='mb-8 text-2xl font-bold text-theme-dark'>
            Información de contacto
          </p>
          <ul class='flex flex-col space-y-8'>
            <li>
              <div class='flex text-theme-dark items-center text-xl'>
                <FaAddressCard className='mr-3 text-primary' />
                <p class='font-semibold'>Dirección</p>
              </div>
              <p set:html={markdownify(address)} class='mt-2 leading-5 pl-8' />
            </li>
            <li>
              <div class='flex text-theme-dark items-center text-xl'>
                <FaEnvelope className='mr-3 text-primary' />
                <p class='font-semibold'>Correo electrónico</p>
              </div>
              <p
                set:html={markdownify(email)}
                class='mt-2 leading-5 pl-8 content'
              />
            </li>
            <li>
              <div class='flex text-theme-dark items-center text-xl'>
                <FaPhoneAlt className='mr-3 text-primary' />
                <p class='font-semibold'>Teléfono</p>
              </div>
              <p set:html={markdownify(phone)} class='mt-2 leading-5 pl-8' />
            </li>
          </ul>
        </div>
        <div class='sm:col-7 md:col-8'>
          <div class="result-error px-3 py-4 border border-red-600 bg-red-50 mb-4 text-red-600 rounded-md hidden">
            Favor de verificar todos los campos.
          </div>
          <div class="result-ok px-3 py-4 border border-green-600 bg-green-50 mb-4 text-green-600 rounded-md hidden">
            Tu correo ha sido enviado correctamente.
          </div>

          <form class='contact-form row gy-2 justify-center' onsubmit="handleSubmit(event)">
            <div class='lg:col-6'>
              <label class='mb-2 block' for='name'
                >Nombre <span class='text-red-600'>*</span></label
              >
              <input
                class='form-input w-full'
                name='name'
                type='text'
                id='name'
                required
              />
            </div>
            <div class='lg:col-6'>
              <label class='mb-2 block' for='email'
                >Correo electrónico <span class='text-red-600'>*</span></label
              >
              <input
                class='form-input w-full'
                name='email'
                type='email'
                id='email'
                required
              />
            </div>
            <div class='col-12'>
              <label class='mb-2 block' for='subject'>Asunto</label>
              <input
                class='form-input w-full'
                name='subject'
                type='text'
                id='subject'
              />
            </div>
            <div class='col-12'>
              <label class='mb-2 block' for='content'
                >Mensaje <span class='text-red-600'>*</span></label
              >
              <textarea
                class='form-textarea w-full'
                id='content'
                name='content'
                rows='4'></textarea>
            </div>
            <div class='col-12'>
              <button class='btn btn-primary mt-2'>Enviar</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </section>
</Base>

<script is:inline>
  async function handleSubmit(event) {
    event.preventDefault();

    const formData = new FormData(event.target);
    const response = await fetch('/contact', {
      method: 'POST',
      body: formData,
    });

    const resultOk = document.querySelector('.result-ok');
    const resultError = document.querySelector('.result-error');

    if (response.ok) {
      resultOk.classList.remove('hidden');
      resultError.classList.add('hidden');
      event.target.reset();;
    } else {
      resultOk.classList.add('hidden');
      resultError.classList.remove('hidden');
    }
  }
</script>
